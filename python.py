import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8283353760:AAEWh--gnJkMW3lwl601EqvCs_7_mnuLBOA"
ADMIN_ID = 7739672364

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db():
    conn = sqlite3.connect('bot_database.db')
    return conn

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
def check_admin_rights(user_id, right_type):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(f"SELECT {right_type} FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_admin_keyboard():
    return ReplyKeyboardMarkup([
        ["‚ñ∑–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∑"]
    ], resize_keyboard=True)

def post_type_keyboard():
    return ReplyKeyboardMarkup([
        ["–¢–µ–∫—Å—Ç", "–ö–∞—Ä—Ç–∏–Ω–∞", "GIF"],
        ["–í–∏–¥–µ–æ", "–§–∞–π–ª", "üîô–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id == ADMIN_ID or check_admin_rights(user_id, "can_post"):
        await update.message.reply_text(
            "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ Telegram –∫–∞–Ω–∞–ª—ã.*\n\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞, –º–µ–¥–∏–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
            "_–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ @GordScripts_\n"
            "–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: @akookd",
            parse_mode='Markdown',
            reply_markup=main_admin_keyboard()
        )
    else:
        await update.message.reply_text("‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!*", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "‚ñ∑–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∑":
        if user_id == ADMIN_ID or check_admin_rights(user_id, "can_add_channels"):
            await update.message.reply_text(
                "üìã *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª* \n\n"
                "‚ö†Ô∏è *–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ò–¢–ï –î–û–°–¢–£–ü –ö –£–ü–†–ê–í–õ–ï–ù–ò–Æ –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò!*\n"
                "–ù–µ –ø–µ—Ä–µ–ø—É—Ç–∞–π—Ç–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–º!",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup([["–Ø –¥–æ–±–∞–≤–∏–ª‚úîÔ∏è"]], resize_keyboard=True)
            )
        else:
            await update.message.reply_text("‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤!*", parse_mode='Markdown')
    
    elif text == "–Ø –¥–æ–±–∞–≤–∏–ª‚úîÔ∏è":
        await update.message.reply_text("üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ Username –∫–∞–Ω–∞–ª–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name)", parse_mode='Markdown')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_username = update.message.text
    user_id = update.effective_user.id
    
    try:
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO channels (username, added_by) VALUES (?, ?)", (channel_username, user_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ *–ö–∞–Ω–∞–ª {channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode='Markdown')
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
        await update.message.reply_text(
            "üìÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:*",
            reply_markup=post_type_keyboard(),
            parse_mode='Markdown'
        )
        
    except sqlite3.IntegrityError:
        await update.message.reply_text("‚ùå *–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏ —Ñ–∞–π–ª–æ–≤
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
async def post_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Ç–∫–∞: Text", callback_data="markup_text")],
        [InlineKeyboardButton("–ü—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫: –û—Ç–∫–ª.", callback_data="preview_off")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        keyboard = [
            ["–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"],
            ["–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞"]
        ]
        
        await update.message.reply_text(
            "üõ† *–í–´ –ê–î–ú–ò–ù!*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode='Markdown'
        )

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
async def set_admin_rights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏/–∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏
    pass

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.run_polling()

if __name__ == "__main__":
    main()
